frontend/
├── static/
│   ├── css/
│   ├── js/
│   └── images/
└── templates/
    ├── base.html
    ├── dashboard.html
    ├── documentos/
    │   ├── lista.html
    │   ├── upload.html
    │   └── detalhe.html
    ├── processamento/
    │   ├── analise.html
    │   └── resultados.html
    ├── normas/
    │   ├── lista.html
    │   ├── validacao.html
    │   └── historico.html
    └── relatorios/
        ├── gerar.html
        └── visualizar.html



Fluxo de Funcionamento Melhorado
1. Coleta de Documentos (Opções Flexíveis)
Interface para upload manual:

Formulário para upload de PDFs individuais ou em lote

Opção para inserir metadados (data, título, etc)

Coleta automática:

Botão para execução manual do diario_scraper.py

Agendamento de coletas automáticas

Visualização do histórico de coletas

2. Processamento Controlado
Seleção de documentos para processamento:

Lista de documentos não processados

Seleção múltipla para processamento em lote

Configuração de parâmetros de análise (termos chave, etc)

Visualização do processamento:

Barra de progresso

Logs em tempo real

Resultados parciais

3. Validação de Normas
Interface de verificação:

Lista de normas identificadas

Botão para verificar vigência junto à SEFAZ

Visualização do status (vigente, revogada, alterada)

Detalhes das alterações quando aplicável

Validação manual:

Opção para marcar normas como válidas/revogadas manualmente

Adição de comentários/justificativas

4. Geração de Relatórios
Configuração de relatórios:

Seleção de documentos/normas a incluir

Escolha de formato (PDF, Excel, HTML)

Personalização de templates

Relatórios automáticos:

Programação de geração periódica

Envio automático por email

Implementação Recomendada
Tecnologias Sugeridas:
Frontend: Bootstrap 5 + Alpine.js (para interatividade sem complexidade)

Backend: Django (mantendo sua base atual)

Processamento Assíncrono: Celery + Redis (para tarefas demoradas)

Armazenamento: Amazon S3 ou similar para documentos PDF